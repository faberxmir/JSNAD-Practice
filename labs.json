{"chapters":[
    {
    "chapter": "Event Emitters",
    "purpose": "This chapter aims to teach the basics and advanced concepts of using EventEmitter in Node.js.",
    "assignments": [
      {
        "Order": 1,
        "subtitle": "Basic EventEmitter",
        "description": "Create a simple EventEmitter instance and register a listener for a custom event.",
        "purpose": "To understand how to create an EventEmitter instance, register a listener, and emit an event."
      },
      {
        "Order": 2,
        "subtitle": "Removing Event Listeners",
        "description": "Learn to remove specific event listeners.",
        "purpose": "To practice adding and removing listeners and observe how only the remaining listeners are called when the event is emitted."
      },
      {
        "Order": 3,
        "subtitle": "One-time Event Listeners",
        "description": "Use the once method to register a one-time listener.",
        "purpose": "To ensure the one-time listener is only called once."
      },
      {
        "Order": 4,
        "subtitle": "Passing Arguments to Listeners",
        "description": "Pass arguments to the event listeners when emitting an event.",
        "purpose": "To understand how to pass arguments to listeners."
      },
      {
        "Order": 5,
        "subtitle": "Handling Errors",
        "description": "Handle errors using the 'error' event.",
        "purpose": "To learn how to handle errors in EventEmitter and ensure the application doesn't crash."
      },
      {
        "Order": 6,
        "subtitle": "Wildcard Event Listener (Advanced)",
        "description": "Implement a wildcard listener that listens to all events.",
        "purpose": "To understand how to extend EventEmitter functionality and handle multiple events with a single listener."
      },
      {
        "Order": 7,
        "subtitle": "Event Listener with Priority (Advanced)",
        "description": "Implement a priority system for event listeners.",
        "purpose": "To learn how to manage and execute listeners based on their priority."
      },
      {
        "Order": 8,
        "subtitle": "Event Emitter with Asynchronous Listeners",
        "description": "Handle asynchronous event listeners.",
        "purpose": "To understand how to manage asynchronous operations within event listeners."
      },
      {
        "Order": 9,
        "subtitle": "Custom Event Emitter Class",
        "description": "Extend the EventEmitter class to add custom functionality.",
        "purpose": "To learn how to extend EventEmitter and add custom methods."
      },
      {
        "Order": 10,
        "subtitle": "Real-World Use Case - File Processing",
        "description": "Use EventEmitter for a real-world scenario, such as processing a file.",
        "purpose": "To apply your knowledge of EventEmitter to a practical use case and see how it can be used to manage complex workflows."
      }
    ]
  },
  {
    "chapter": "Promises",
    "purpose": "This chapter aims to provide a comprehensive understanding of promises and asynchronous programming in JavaScript.",
    "assignments": [
      {
        "Order": 1,
        "subtitle": "Basic Promise Creation",
        "description": "Create a basic promise that resolves after 2 seconds with a message 'Hello, World!'.",
        "purpose": "To understand the basic creation and resolution of promises."
      },
      {
        "Order": 2,
        "subtitle": "Handling Promise Rejection",
        "description": "Create a promise that rejects with an error message 'Something went wrong!' and handle the rejection.",
        "purpose": "To learn how to handle promise rejections."
      },
      {
        "Order": 3,
        "subtitle": "Chaining Promises",
        "description": "Chain two promises, where the first one resolves with a number and the second one adds 10 to that number.",
        "purpose": "To practice chaining promises for sequential operations."
      },
      {
        "Order": 4,
        "subtitle": "Using Promise.all",
        "description": "Create three promises that resolve with different values after different intervals. Use Promise.all to wait for all of them to complete.",
        "purpose": "To understand how to use Promise.all to handle multiple promises."
      },
      {
        "Order": 5,
        "subtitle": "Using Promise.race",
        "description": "Create three promises that resolve after different intervals. Use Promise.race to get the result of the first promise that resolves.",
        "purpose": "To learn how to use Promise.race to handle the fastest promise."
      },
      {
        "Order": 6,
        "subtitle": "Promise in a Function",
        "description": "Create a function that returns a promise. The promise should resolve with the square of a number after 2 seconds.",
        "purpose": "To practice returning promises from functions."
      },
      {
        "Order": 7,
        "subtitle": "Error Handling in Promises",
        "description": "Create a promise that may either resolve or reject based on a condition. Handle both the success and error cases.",
        "purpose": "To understand how to handle errors in promise-based operations."
      },
      {
        "Order": 8,
        "subtitle": "Nested Promises",
        "description": "Create a promise that returns another promise. The inner promise should resolve with a value after 1 second, and the outer promise should resolve after the inner promise resolves.",
        "purpose": "To learn how to handle nested promises."
      },
      {
        "Order": 9,
        "subtitle": "Async/Await Syntax",
        "description": "Rewrite the previous assignment using async/await syntax.",
        "purpose": "To understand how to use async/await for handling asynchronous operations."
      },
      {
        "Order": 10,
        "subtitle": "Sequential Promise Execution",
        "description": "Create an array of numbers. Write a function that returns a promise to multiply each number by 2 after 1 second. Use reduce to execute these promises sequentially.",
        "purpose": "To learn how to execute promises sequentially using reduce."
      }
    ]
  },
  {
    "chapter": "Buffers",
    "purpose": "This chapter aims to teach the fundamentals of working with buffers in Node.js.",
    "assignments": [
      {
        "Order": 1,
        "subtitle": "Create a Buffer",
        "description": "Create a buffer of length 10 and fill it with zeros. Log the buffer to the console.",
        "purpose": "To understand how to create and initialize buffers."
      },
      {
        "Order": 2,
        "subtitle": "Write to a Buffer",
        "description": "Create a buffer of length 15. Write the string 'Hello' to the buffer starting at position 0. Log the buffer to the console.",
        "purpose": "To learn how to write data to buffers."
      },
      {
        "Order": 3,
        "subtitle": "Read from a Buffer",
        "description": "Create a buffer containing the string 'Node.js'. Read and log the first 4 bytes as a string.",
        "purpose": "To practice reading data from buffers."
      },
      {
        "Order": 4,
        "subtitle": "Copy Buffers",
        "description": "Create two buffers of length 10 each. Fill the first buffer with the string 'BufferOne'. Copy the contents of the first buffer into the second buffer. Log both buffers to the console.",
        "purpose": "To understand how to copy data between buffers."
      },
      {
        "Order": 5,
        "subtitle": "Concatenate Buffers",
        "description": "Create three buffers with the strings 'Node', '.', and 'js'. Concatenate these buffers into a single buffer. Log the resulting buffer as a string.",
        "purpose": "To learn how to concatenate multiple buffers."
      },
      {
        "Order": 6,
        "subtitle": "Convert Buffer to JSON",
        "description": "Create a buffer with the string 'Buffer to JSON'. Convert this buffer into a JSON object. Log the JSON object.",
        "purpose": "To understand how to convert buffers to JSON."
      },
      {
        "Order": 7,
        "subtitle": "Allocate Unsafe Buffer",
        "description": "Allocate an unsafe buffer of length 5. Fill it with the values [1, 2, 3, 4, 5]. Log the buffer to the console.",
        "purpose": "To learn how to allocate and use unsafe buffers."
      },
      {
        "Order": 8,
        "subtitle": "Compare Buffers",
        "description": "Create two buffers with the strings 'BufferA' and 'BufferB'. Compare the buffers using Buffer.compare(). Log the result of the comparison.",
        "purpose": "To practice comparing buffers."
      },
      {
        "Order": 9,
        "subtitle": "Slice a Buffer",
        "description": "Create a buffer with the string 'Node.js Buffers'. Slice the buffer to get the word 'Buffers'. Log the sliced buffer as a string.",
        "purpose": "To understand how to slice buffers."
      },
      {
        "Order": 10,
        "subtitle": "Encode and Decode Buffers",
        "description": "Create a buffer from a UTF-8 encoded string 'Encoding Buffers'. Convert this buffer to a base64 encoding. Decode the base64 encoded buffer back to a string. Log the final string.",
        "purpose": "To learn how to encode and decode buffers."
      }
    ]
  },
  {
    "chapter": "Streams and Piping",
    "purpose": "This chapter aims to teach the basics and advanced concepts of streams and piping in Node.js.",
    "assignments": [
      {
        "Order": 1,
        "subtitle": "Create a Readable Stream",
        "description": "Create a readable stream that emits numbers from 1 to 5. Log the data emitted by the stream.",
        "purpose": "To understand how to create and use readable streams."
      },
      {
        "Order": 2,
        "subtitle": "Create a Writable Stream",
        "description": "Create a writable stream that logs data written to it. Write the string 'Hello Stream' to the writable stream.",
        "purpose": "To learn how to create and use writable streams."
      },
      {
        "Order": 3,
        "subtitle": "Pipe Streams",
        "description": "Create a readable stream that emits 'Hello, World!'. Create a writable stream that logs data. Pipe the readable stream to the writable stream.",
        "purpose": "To practice piping data from a readable stream to a writable stream."
      },
      {
        "Order": 4,
        "subtitle": "Transform Stream",
        "description": "Create a transform stream that converts input text to uppercase. Pipe the string 'node.js streams' through this transform stream. Log the transformed output.",
        "purpose": "To understand how to create and use transform streams."
      },
      {
        "Order": 5,
        "subtitle": "Read from a File",
        "description": "Create a readable stream from a file named input.txt. Log the data read from the file.",
        "purpose": "To learn how to read data from a file using streams."
      },
      {
        "Order": 6,
        "subtitle": "Write to a File",
        "description": "Create a writable stream to a file named output.txt. Write the string 'Writing to a file using streams' to this writable stream.",
        "purpose": "To understand how to write data to a file using streams."
      },
      {
        "Order": 7,
        "subtitle": "Duplex Stream",
        "description": "Create a duplex stream that acts as both readable and writable. For every chunk written to it, it should respond with 'Echo: ' + chunk. Test the duplex stream by writing and reading data.",
        "purpose": "To learn how to create and use duplex streams."
      },
      {
        "Order": 8,
        "subtitle": "Pipe Multiple Streams",
        "description": "Create a readable stream from a file named input.txt. Create a transform stream that reverses the content. Create a writable stream to a file named output.txt. Pipe the readable stream through the transform stream and then to the writable stream.",
        "purpose": "To practice piping data through multiple streams."
      },
      {
        "Order": 9,
        "subtitle": "Handle Stream Errors",
        "description": "Create a readable stream from a non-existent file. Handle the error event to log an appropriate message.",
        "purpose": "To understand how to handle errors in streams."
      },
      {
        "Order": 10,
        "subtitle": "Stream Performance",
        "description": "Create a script to read a large file using a stream and measure the time taken. Compare the performance with reading the same file using fs.readFileSync.",
        "purpose": "To compare the performance of streams with traditional file reading methods."
      }
    ]
  },
  {
    "chapter": "fs (File System)",
    "purpose": "This chapter aims to familiarize users with basic file system operations using scripts.",
    "assignments": [
      {
        "Order": 1,
        "subtitle": "Reading a File",
        "description": "Create a script that reads the contents of a file named example.txt and logs it to the console.",
        "purpose": "To learn how to read files and output their content to the console."
      },
      {
        "Order": 2,
        "subtitle": "Writing to a File",
        "description": "Create a script that writes the string 'Hello, File System!' to a file named output.txt.",
        "purpose": "To understand how to write data to a file."
      },
      {
        "Order": 3,
        "subtitle": "Appending to a File",
        "description": "Create a script that appends the string 'Appended content' to the output.txt file.",
        "purpose": "To practice appending data to an existing file."
      },
      {
        "Order": 4,
        "subtitle": "Deleting a File",
        "description": "Create a script that deletes the output.txt file if it exists.",
        "purpose": "To learn how to check for file existence and delete files."
      },
      {
        "Order": 5,
        "subtitle": "Creating a Directory",
        "description": "Create a script that creates a directory named testDir.",
        "purpose": "To understand how to create directories programmatically."
      },
      {
        "Order": 6,
        "subtitle": "Listing Directory Contents",
        "description": "Create a script that lists the contents of the current directory and logs them to the console.",
        "purpose": "To explore how to list and log directory contents."
      },
      {
        "Order": 7,
        "subtitle": "Checking if a File Exists",
        "description": "Create a script that checks if example.txt exists and logs an appropriate message.",
        "purpose": "To learn how to verify the existence of a file and handle it accordingly."
      },
      {
        "Order": 8,
        "subtitle": "Copying a File",
        "description": "Create a script that copies example.txt to a new file named exampleCopy.txt.",
        "purpose": "To practice copying files within the file system."
      },
      {
        "Order": 9,
        "subtitle": "Watching a File for Changes",
        "description": "Create a script that watches example.txt for any changes and logs a message when a change is detected.",
        "purpose": "To understand how to monitor files for changes and handle those events."
      },
      {
        "Order": 10,
        "subtitle": "Reading and Writing JSON Files",
        "description": "Create a script that reads a JSON file named data.json, parses it, modifies a property, and writes it back to the file.",
        "purpose": "To learn how to handle JSON files, including reading, parsing, modifying, and writing data."
      }
    ]
  },
  {
    "chapter": "http (HTTP)",
    "purpose": "This chapter aims to provide practical exercises to master the fs and http modules in Node.js.",
    "assignments": [
      {
        "Order": 1,
        "subtitle": "Basic HTTP Server",
        "description": "Create a basic HTTP server that responds with 'Hello, World!' to any request.",
        "purpose": "To understand how to create a basic HTTP server."
      },
      {
        "Order": 2,
        "subtitle": "Serving HTML Content",
        "description": "Modify the HTTP server to respond with an HTML page containing 'Hello, World!'.",
        "purpose": "To learn how to serve HTML content with an HTTP server."
      },
      {
        "Order": 3,
        "subtitle": "Handling Different Routes",
        "description": "Extend the HTTP server to handle different routes (e.g., /home, /about) and respond with different messages.",
        "purpose": "To understand how to handle different routes in an HTTP server."
      },
      {
        "Order": 4,
        "subtitle": "Handling Query Parameters",
        "description": "Modify the server to read query parameters from the URL and respond with a message that includes those parameters.",
        "purpose": "To learn how to handle query parameters in an HTTP server."
      },
      {
        "Order": 5,
        "subtitle": "Parsing JSON Request Body",
        "description": "Create an HTTP server that accepts a POST request with a JSON body and responds with the same JSON data.",
        "purpose": "To understand how to parse and respond with JSON data in an HTTP server."
      },
      {
        "Order": 6,
        "subtitle": "Serving Static Files",
        "description": "Modify the server to serve static files from a directory (e.g., public). Serve an HTML file when the root route is accessed.",
        "purpose": "To learn how to serve static files with an HTTP server."
      },
      {
        "Order": 7,
        "subtitle": "Handling Form Data",
        "description": "Create an HTTP server that serves a simple HTML form. When the form is submitted, the server should parse the form data and respond with it.",
        "purpose": "To understand how to handle form data in an HTTP server."
      },
      {
        "Order": 8,
        "subtitle": "Creating a Simple API",
        "description": "Create an HTTP server that acts as a simple API. Define routes to handle GET, POST, PUT, and DELETE requests, and respond with appropriate messages.",
        "purpose": "To learn how to create a simple API with an HTTP server."
      },
      {
        "Order": 9,
        "subtitle": "HTTP Redirects",
        "description": "Modify the server to perform an HTTP redirect from /old-route to /new-route.",
        "purpose": "To understand how to handle HTTP redirects."
      },
      {
        "Order": 10,
        "subtitle": "Handling Cookies",
        "description": "Extend the HTTP server to set a cookie in the response and read it from subsequent requests.",
        "purpose": "To learn how to handle cookies in an HTTP server."
      }
    ]
  },
  {
    "chapter": "package.json Dependencies and Semver",
    "purpose": "This chapter aims to teach the management of dependencies and semantic versioning in Node.js projects using package.json.",
    "assignments": [
      {
        "Order": 1,
        "subtitle": "Create a package.json",
        "description": "Create a package.json file for a project with the name 'my-project' and version '1.0.0'.",
        "purpose": "To understand how to create and initialize a package.json file."
      },
      {
        "Order": 2,
        "subtitle": "Add Dependencies",
        "description": "Add a dependency to express version '^4.17.1' using CLI. Read the package.json file to verify the addition.",
        "purpose": "To learn how to add dependencies to a Node.js project."
      },
      {
        "Order": 3,
        "subtitle": "Add Development Dependencies",
        "description": "Add a development dependency to mocha version '^8.3.2' using CLI. Log the package.json file to verify the addition.",
        "purpose": "To understand how to add development dependencies to a Node.js project."
      },
      {
        "Order": 4,
        "subtitle": "Use Semver Ranges",
        "description": "Explain the difference between '^1.0.0', '~1.0.0', and '1.0.0' in package.json.",
        "purpose": "To learn the differences between various semantic versioning ranges."
      },
      {
        "Order": 5,
        "subtitle": "Update a Dependency",
        "description": "Update the express dependency to version '^4.18.0'. Log the package.json file to verify the update.",
        "purpose": "To understand how to update dependencies in a Node.js project."
      },
      {
        "Order": 6,
        "subtitle": "Remove a Dependency",
        "description": "Remove the mocha development dependency. Log the package.json file to verify the removal.",
        "purpose": "To learn how to remove dependencies from a Node.js project."
      },
      {
        "Order": 7,
        "subtitle": "Add Scripts",
        "description": "Add a script named 'start' that runs 'node index.js'. Log the package.json file to verify the addition.",
        "purpose": "To understand how to add scripts to a package.json file."
      },
      {
        "Order": 8,
        "subtitle": "Use Peer Dependencies",
        "description": "Add a peer dependency for react version '^17.0.1'. Log the package.json file to verify the addition.",
        "purpose": "To learn how to add peer dependencies to a Node.js project."
      },
      {
        "Order": 9,
        "subtitle": "Add Optional Dependencies",
        "description": "Add an optional dependency for fsevents version '^2.3.2'. Log the package.json file to verify the addition.",
        "purpose": "To understand how to add optional dependencies to a Node.js project."
      },
      {
        "Order": 10,
        "subtitle": "Handle Conflicting Versions",
        "description": "Explain how to handle conflicting versions of dependencies using resolutions in a package.json file.",
        "purpose": "To learn how to handle conflicting versions of dependencies in a Node.js project."
      }
    ]
  }]
}
  